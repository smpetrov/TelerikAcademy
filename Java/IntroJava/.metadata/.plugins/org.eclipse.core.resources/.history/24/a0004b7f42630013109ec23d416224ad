
/*
 * Implement the "Falling Rocks" game in the text console. 
 * A small dwarf stays at the bottom of the screen and 
 * can move left and right (by the arrows keys). 
 * A number of rocks of different sizes and forms constantly 
 * fall down and you need to avoid a crash.
 * Rocks are the symbols ^, @, *, &, +, %, $, #, !, ., ;, - 
 * distributed with appropriate density. 
 * The dwarf is (O). Ensure a constant game speed by Thread.Sleep(150).
 * Implement collision detection and scoring system
 * 
 * Прави се по лекцията на Николай Костов от Телерик за играта justcars.
 * 
 */
import java.awt.event.KeyEvent;
import java.io.Console;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class FallingRocks {
	
	
	//клас описвща падащите скали
    static void printCharOnPosition(int x, int y, char c) {
  //  	jht.setCursorPosition((short)x,(short)y);
        //Console.ForegroundColor = color;
        System.out.print(c);
    }
    //, ConsoleColor color = ConsoleColor.Gray)
    public static void printStringOnPosition(int x, int y, String c) {
  //  	jht.setCursorPosition((short)x,(short)y);
        //Console.ForegroundColor = color;
    	System.out.print(c);
    }

    
	public static void main(String[] args) {
	    //методи за изпечатване на екранните обекти
		//, ConsoleColor color = ConsoleColor.Gray)
		static JavaHowTo jht = new JavaHowTo();

        //space
    	char[] fill = new char[41];
    	Arrays.fill(fill,' ');
        String spaceStr = new String(fill);

        //брой животи
        int livesCount = 5;
        //levels
        int level = 1;

        //ponits
        int points = 0;
        //point level
        ArrayList<Integer> pointLevel = new ArrayList<Integer>();
        pointLevel.add(50);
        pointLevel.add(100);
        pointLevel.add(150);
        pointLevel.add(200);
        pointLevel.add(250);
        pointLevel.add(300);
        pointLevel.add(350);
        pointLevel.add(400);
        pointLevel.add(450);
        pointLevel.add(500);
        pointLevel.add(550);
        
        //скриваме показването на курсора
        //Console.CursorVisible = false;

        //скорост
        double speed = 100;
        //стъпка за увеличаване на скоростта
        double accelerator = 0.5;

        //определяме размера на игралното поле
        int playFieldWidth = 41;

        //определяме размерите на конзолата и махаме скролбаровете
        //Console.BufferHeight = Console.WindowHeight = 20;
        //Console.BufferWidth = Console.WindowWidth = 70;
        int ConsoleWindowHeight = 20;
        int ConsoleWindowWidth = 70;

        //дифинираме нашия кораб
        char rock = '#';
        int userShuttlex = (int)(playFieldWidth / 2 + 1);
        int userShuttley = ConsoleWindowHeight - 1;
        char userShuttlec = '@';
        
        //userShuttle.color = ConsoleColor.Red;

        //масив от възможните скали
        //char[] rocks = { '^', '@', '*', '&', '+', '%', '$', '#', '!', '.', ';', '-' };
        //масив от възможните цветове на скалите
        //ConsoleColor[] colorsRocks = {ConsoleColor.Blue,ConsoleColor.Cyan,ConsoleColor.Green,
        //                             ConsoleColor.Magenta,ConsoleColor.White};


        //масив съдържащ скалите по екрана и го запълваме с празни символи
        char [][] screenRocks = new char[ConsoleWindowHeight][playFieldWidth];
        for (int i = 0; i < ConsoleWindowHeight; i++) {
            for (int j = 0; j < playFieldWidth; j++) {
            	screenRocks[i][j] = ' ';
                //screenRocks[i][j].color = ConsoleColor.Black;
            }
        }

        //разчертаваме игралното поле
        for (int i = ConsoleWindowHeight - 1; i >= 0; i--) {
        	//jht.setCursorPosition((short)playFieldWidth,(short)i);
        	jht.setCursorPosition((short)10,(short)10);
        	System.out.print("|");
        }

        //генератор на случайни числа
        Random randomGenerator = new Random();

        while (true) {
            //на всяка стъпка по 1 точка
            points++;

            //на всяка стъпка увеличаваме скоростта
            speed = speed + accelerator;
            if (speed > 550) {
                speed = 550;
            }
            //увеличаваме нивото след всеки 50 спечелени точки и скоростта с 50
            if (pointLevel.indexOf(points) != -1) {
                level++;
                if (level >= 10) {
                	jht.setCursorPosition((short)50,(short)10);
                	System.out.println("Game over !");
                	jht.setCursorPosition((short)50,(short)15);
                	System.out.println("Your points " + points + " !");
                	jht.setCursorPosition((short)50,(short)17);
                	System.out.println("YOU WIN !!!");
                    return;
                }
                speed = speed + 50;
                if (speed > 550) {
                    speed = 550;
                }
            }

            //съэдаваме на всеки ход по един ред от масива със скали със съответната плътност
            //преместваме всеки ред с един напред
            for (int i = ConsoleWindowHeight - 2; i >= 0; i--) {
                for (int j = 0; j < playFieldWidth; j++) {
                    screenRocks[i + 1][j] = screenRocks[i][j];
                }
            }
            //изпразваме ред 0 от масива със скалите
            for (int i = 0; i < playFieldWidth; i++) {
                screenRocks[0][i] = ' ';
                //screenRocks[0][i].color = ConsoleColor.Black;
            }

            //на първия ред пишем новогенерираните скали
            //генерираме нови скали
            //колкото и нивото толкова са скалите на ред
            for (int i = 0; i < level; i++) {
                int indexRock;
                int indexColor;
                int indexArea;
                do {
                    //indexColor = randomGeneratort(0, colorsRocks.Length);
                    indexArea = randomGenerator.nextInt(playFieldWidth);
                }
                while (screenRocks[0][indexArea] != ' ');
                screenRocks[0][indexArea] = rock;
                //screenRocks[0][indexArea].color = colorsRocks[indexColor];
            }

            //проверка за сблъсък
            boolean hasHit = false;
            for (int i = 0; i < playFieldWidth; i++) {
                if ((userShuttlex == i) &&
                    (screenRocks[ConsoleWindowHeight - 1][i] != ' ')) {
                    hasHit = true;
                    if (livesCount - 1 <= 0) {
	                	jht.setCursorPosition((short)50,(short)10);
	                	System.out.println("Game over !");
                        return;
                    }
                    else {
                        livesCount--;
                        hasHit = true;
                    }
                }
            }

            //Move our car /key pressed/
            Scanner input = new Scanner(System.in);
            int key = input.nextByte();
            while (key != 0) {
                //прихващаме клавиша на тиснат от потребителя. true - не извеждай въведения символ
                if ( key == KeyEvent.VK_LEFT) {
                    if (userShuttlex - 1 >= 0) {
                        userShuttlex--;
                    }

                }
                else if  (key == KeyEvent.VK_RIGHT) {
                    if (userShuttlex + 1 < playFieldWidth) {
                        userShuttlex++;
                    }
                }
            }

            //Move cars
            //Redraw palyfield
            for (int i = ConsoleWindowHeight - 2; i >= 0; i--) {
                for (int j = 0; j < playFieldWidth; j++) {
                    jht.setCursorPosition((short)j,(short)i);
                	System.out.println(screenRocks[i][j]);
                }
            }
            jht.setCursorPosition((short)0,(short)userShuttley);
        	System.out.println(spaceStr);
            if (hasHit) {
                jht.setCursorPosition((short)userShuttlex,(short)userShuttley);
            	System.out.println('X');
            }
            else {
                jht.setCursorPosition((short)userShuttlex,(short)userShuttley);
            	System.out.println(userShuttlec);
            }

            jht.setCursorPosition((short)50,(short)7);
        	System.out.println("Level = " + level);
        	jht.setCursorPosition((short)50,(short)8);
        	System.out.println("Lives = " + livesCount);
        	jht.setCursorPosition((short)50,(short)15);
        	System.out.println("Your points " + points + " !");
            //Draw info
            //Slow down program
            ///wait((long)(600 - speed));
        }
	}
}